#!/usr/bin/env python
import getpass, sys
from flask import g
from PyChannel import app
from PyChannel.objects import Tripcode
from datetime import timedelta
import cPickle as cP
import argparse
from contextlib import contextmanager
import functools
import os

@contextmanager
def app_context():
	"create and destroy a context object"
	ctx = app.test_request_context()
	ctx.push()
	app.preprocess_request()
	yield ctx
	ctx.pop()

def context(func):
	"run decorated function in an app context"

	@functools.wraps(func)
	def wrapper(*args, **kwargs):
		with app_context() as app:
			return func(app, *args, **kwargs)

	return wrapper

@context
def create(app, args):
	"Create a new admin user"
	u_name = raw_input("Enter Username >>> ")
	u_pass = getpass.getpass("Enter Password >>> ")
	u_pass2 = getpass.getpass("Enter Password again >>> ")
	if u_pass != u_pass2:
		print "Passwords do not match"
		return None
	
	trip = Tripcode(u_name, u_pass)
	trip.permission = "admin"
	trip.password = u_pass
	trip.save()
	
	print "Admin added..."

@context
def unban(app, args):
	"unban an (or multiple) ip address, used with the -a argument"
	for ip in args.address:
		if g.r.exists(":".join(["ban", ip])):
			g.r.delete(":".join(["ban", ip]))
			print "Ban on address {0} released.".format(ip)
		else:
			print "No current ban on address {0}.".format(ip)
	
@context
def ban(app, args):
	"ban an (or multiple) ip address, used with the -a argument"
	for ip in args.address:
		if g.r.exists(":".join(["ban", ip])):
			print "Ban already exists on address {0}.".format(ip)
		else:
			g.r.set(":".join(["ban", ip]), True)
			g.r.expire(":".join(["ban", ip]), int(timedelta(weeks=1).total_seconds()))
			print "Ban on address {0} instated.".format(ip)

def run(args):
	"run pychannel (mostly for development purposes)"
	if args.config:
		os.environ["FLASK_BOARD_CONFIG"] = args.config
	app.run()

choices = {
	"create": create,
	"ban": ban,
	"unban": unban,
	"run": run
}

def render_choice_help():
	help = []
	for choice, func in choices.iteritems():
		help.append("{0}: {1}".format(choice, func.__doc__))
	return " | ".join(help)

parser = argparse.ArgumentParser()

parser.add_argument("-a", "--address", action="append", 
					help="The ip address to ban or unban")
parser.add_argument("-c", "--config", nargs=1, 
					help="Location of the config file, used in conjuction with \
						  the run argument")

parser.add_argument("action", choices=choices.keys(),
		help="Action to perform.\n"+render_choice_help())

if __name__ == "__main__":
	args = parser.parse_args()
	action = choices.get(args.action)
	action(args)
